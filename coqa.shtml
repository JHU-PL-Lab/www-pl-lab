<!--#include virtual="/lab/header.html" -->

<h2>Coqa: Concurrent Objects with Quantized Atomicity</h2>

Coqa is a new object-oriented language, (for <i>C</i>oncurrent
<o>o</i>bjects with <i>q</i>uantized <i>a</i>tomicity), which builds
concurrency and atomicity-by-design deeply into the object model. This
ongoing project aims to reconsider of the "right" concurrency model
for tightly-coupled computations that can be easily deployable on
multi-core CPUs. This project is now a
joint collaboration between JHU and SUNY Binghamton. 

<p>
The design of Coqa follows six principles that we
believe are crucial for a concurrent programming language:
<ul>
<li>Good Concurrency Properties Preserved by Default</i>
<li>Always <i>En Guarde</i> While Sharing</li>
<li>The Importance of Being Ubiquitously Atomic</li>
<li>Atomicity is Not Necessarily All or Nothing</li>
<li>Optimistic Atomicity is Not Always the Best Policy</li>
<li>Put OO-Style Concurrency in OO Languages </li>
</ul>  

From a programming perspective, Coqa has three desirable
properties, from higher- to lower-level as follows:
<ul>  
<li>Quantized atomicity -- Each method is composed of several discrete <i>quanta</i>, and execution of each quantum is serializable regardless of the interleaving of the actual execution. </li>
<li>Mutual exclusion within tasks -- Our language guarantees state change happens in a predictable way, even across different quanta of a task.</li>
<li>Race freedom -- No race conditions ever arise in object field access.</li>
</ul>

Coqa currently consists of a formal system, <i>KernelCoqa</i> and a
prototype implementation <i>CoqaJava</i>.   
<p>


<h3>Publications</h3>

<ul>

<li> Yu David Liu, Xiaoqi Lu, and Scott Smith. <b><a
href="papers/CC08.pdf">Coqa:
  Concurrent Objects with Quantized Atomicity</a></b>.  Compiler
  Construction (CC), 2008.   <a href="papers/Coqa.ppt">slides</a>
<p>
<blockquote><font size=-3> <strong>Abstract:</strong> This paper introduces a new language model, <em>Coqa</em>, for deeply
embedding concurrent programming into objects. Every program
written in our language has the desirable behaviors of atomicity,
mutual exclusion, and race freedom automatically built in. A key
property of our model is the notion of quantized atomicity: every
concurrent program execution can be viewed as being divided into
quantum regions of atomic execution, greatly reducing the number
of interleavings to consider.  So rather than building atomicity
locally, with small declared zones, we build it globally, down
from the top.  We justify our approach both from a theoretical
basis by showing that a formal representation, KernelCoqa,
has provable quantized atomicity properties, and by implementing
CoqaJava, a Java extension incorporating all of the
Coqa features.
</font>
    </blockquote>
<p>

<li> Xiaoqi Lu. <b><a
  href="papers/xiaoqilu-phd.pdf"> Coqa: a Concurrent Programming Model with 
Ubiquitous Atomicity</a></b>. PhD Thesis, The Johns Hopkins
  University, November 2007.



</ul>

 <!--#include virtual="/lab/footer.html" -->
